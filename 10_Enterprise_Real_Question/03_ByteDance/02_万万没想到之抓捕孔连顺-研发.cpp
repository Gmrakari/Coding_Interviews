

/*
 * Date:2021-07-21 14:36
 * filename:02_万万没想到之抓捕孔连顺-研发.cpp
 *
 */

/*
 *

2、万万没想到之抓捕孔连顺-研发

我叫王大锤，是一名特工。
我刚刚接到任务：在字节跳动大街进行埋伏，抓捕恐怖分子孔连顺。
和我一起行动的还有另外两名特工，我提议
1. 我们在字节跳动大街的 N 个建筑中选定 3 个埋伏地点。
2. 为了相互照应，我们决定相距最远的两名特工间的距离不超过 D。
我特喵是个天才! 经过精密的计算，我们从 X 种可行的埋伏方案中选
择了一种。这个方案万无一失，颤抖吧，孔连顺！
……
万万没想到，计划还是失败了，孔连顺化妆成小龙女，混在 cosplay
的队伍中逃出了字节跳动大街。只怪他的伪装太成功了，就是杨过本人来
了也发现不了的！
请听题：
给定 N（可选作为埋伏点的建筑物数）、D（相距最远的两名特工间的距离的最大值）以及可选建筑的坐标，
计算在这次行动中，大锤的小队有多少种埋伏选择。
注意：
1. 两个特工不能埋伏在同一地点
2. 三个特工是等价的：即同样的位置组合(A,B,C) 只算一种埋伏方法，不能因“特工之间互换位置”而重复使用

输入描述:
第一行包含空格分隔的两个数字 N 和 D(1≤N≤1000000; 1≤D≤1000000)
第二行包含 N 个建筑物的的位置，每个位置用一个整数（取值区间为[0,1000000]）表示，从小到大排列（将字节跳动大街看做一条数轴）

输出描述:
一个数字，表示不同埋伏方案的数量。结果可能溢出，请对 99997867 取模

输入例子 1:
4 3
1 2 3 4
输出例子 1:
4
例子说明 1:
可选方案 (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)

输入例子 1:
5 19
1 10 20 30 50
输出例子 1:
1
例子说明 1:
可选方案 (1, 10, 20)

*/

/*
 * 题目详解
 *
 * 滑动窗口
 * 设置两个指针，先移动右边，当不满足得时候再移动左边，每次需要计数
 */

#include <bits/stdc++.h>
using namespace std;

long long C(long long n) {
	return (n - 1) * n / 2;
}

int main() {
	long long n, d, count = 0;
	cin >> n >> d;
	vector<long long> v(n);
	for (int i = 0, j = 0; i < n; i++) {
		cin >> v[i];
		while(i >= 2 && (v[i] - v[j] > d)) {
			j++;
		}
		count += C(i - j);
	}
	cout << count % 99997867 << endl;
	return 0;
}
