

/*
 * Date:2021-06-27 19:22
 * filename:123_best-time-to-buy-and-sell-stock-iii.cpp
 *
 */

/*
 *


给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成两笔交易。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例1:

输入：prices = [3,3,5,0,0,3,1,4]
输出：6
解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
示例 2：

输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 
注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3：

输入：prices = [7,6,4,3,1] 
输出：0 
解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
示例 4：

输入：prices = [1]
输出：0

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/*
 * 动态规划分析
 * 这道题目相对于121买卖股票的最佳时机和122买卖股票的最佳时机ii难
 *
 * 关键在于至多买卖两次，这意味着可以买卖一次，可以买卖两次，也可以不买卖
 *
 * 1.确定dp数组以及下标的含义:
 * 一天一共就有5个状态
 *	0 没有操作
 *	1 第一次买入
 *	2 第一次卖出
 *	3 第二次买入
 *	4 第二次卖出
 *
 * dp[i][j] 中的i表示第i天，j为[0-4]五个状态，dp[i][j]中的i表示第i天状态j所剩最大现金
 *
 * 2.确定递推公式
 * 注意:dp[i][1],表示的是第i天，买入股票的状态，并不是说一定要第i天买入股票
 *
 * 达到dp[i][1]状态，有两个具体操作:
 *		操作1:第i天买入股票 那么dp[i][1] = dp[i - 1][0] - prices[i]
 *		操作2:第i天没有操作,而是沿用前一天买入的状态,即:dp[i][1] = d[i - 1][1]
 * 那么dp[i][1]究竟选dp[i - 1][0] - prices[i] 还是dp[i - 1][1]?
 * 选较大则,即dp[i][1] = max(dp[i - 1][0] - prices[i], dp[i - 1][1]);
 *
 * 达到dp[i][2]状态，也是有两个操作:
 *		操作1:第i天卖出股票了，那么dp[i][2] = dp[i - 1][1] + prices[i]
 *		操作2:第i天没有操作，而是沿用前一天卖出股票的状态,即:dp[i][2] = dp[i - 1][2]
 * 即:dp[i][2] = max(dp[i - 1][1] + prices, dp[i - 1][2]);
 *
 * 同理:
 * dp[i][3] = max(dp[i - 1][2] - prices[i], dp[i - 1][3]);
 * dp[i][4] = max(dp[i - 1][3] + prices[i], dp[i - 1][4]);
 *
 * 3.dp数组如何初始化
 * 第0天没有操作，这个最容易想到，就是0,即dp[0][0] = 0;
 * 第0天第一次买入的操作,dp[0][1] = -prices[0];
 * 第0天第一次卖出的操作，这个初始值怎么定义?
 *		首先卖出的操作一定是收获利润,整个股票买卖最差情况也是没有利润即全程无操作现金为0，
 *		从而递推公式中可以看出每次是取最大值，那么既然是收获利润如果比0还小了就没有必要收获
 *		这个利润了
 *		所以dp[0][2] = 0;
 * 第0天第二次买入操作，初始值怎么定义?
 *		不用管第几次，现在手头上没有现金，只要买入，现金就做相应的减少
 *		所以第二次买入操作，初始化为:dp[0][3] = -prices[0];
 * 同理得第二次卖出初始化dp[0][4] = 0;
 *
 * 4.确定遍历顺序
 * 从递归公式其实已经可以看出，一定是从前往后遍历,因为dp[i],依靠dp[i - 1]的数值
 *
 * 5.举例推导dp数组
 * 见ipad --123-best-time-to-buy-and-sell-sock-iii
 *
 */

#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
    int maxProfit(vector<int>& prices) {
			int len = prices.size();
			if (len == 0) return 0;
			vector<vector<int>> dp(len, vector<int>(5,0));
			dp[0][0] = 0;
			dp[0][1] = -prices[0];
			dp[0][2] = 0;
			dp[0][3] = -prices[0];
			dp[0][4] = 0;

			for (int i = 1; i < len;i++) {
				//dp[i][0] = max(dp[i - 1][0],-prices[i]);  错误
				dp[i][0] = dp[i - 1][0];
				dp[i][1] = max(dp[i - 1][0] - prices[i], dp[i - 1][1]);
				dp[i][2] = max(dp[i - 1][1] + prices[i], dp[i - 1][2]);
				dp[i][3] = max(dp[i - 1][2] - prices[i], dp[i - 1][3]);
				dp[i][4] = max(dp[i - 1][3] + prices[i], dp[i - 1][4]);
			}
			return dp[len - 1][4];
    }
};

int main() {
	vector<int> dp = {1,2,3,4,5};
	Solution so;
	cout << so.maxProfit(dp) << endl;
}
