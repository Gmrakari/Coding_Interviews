

/*
 * Date:2021-02-17 11:10
 * Author:Gmrakari
 * Project:面试题031_连续子数组的最大和
 * 
 */

bool g_IncalidInput = false;

int FindGreatestSumOfSubArray(int *pData,int nLength){
	if((pData == NULL) || (nLength <= 0))
	{
		g_InvalidInput = true;
		return 0;
	}

	g_InvalidInput = false;

	int nCurSum = 0;
	int nGreatestSum = 0x80000000;
	for(int i = 0;i < nLength;i++)
	{
		if(nCurSum <= 0)
			nCurSum = pData[i];
		else
			nCurSum += pData[i];

		if(nCurSum > nGreatestSum)
			nGreatestSum = nCurSum;
	}
	return nGreatestSum;
}

解法二：应用动态规划法

如果用函数f(i)表示以第i个数字结尾的子数组的最大和，那么我们需要求出max[f(i)],其中0 <= i <= n。
我们可以用递归公式求f(i):
		
		  pData[i] 			  i = 0 或者 f(i - 1) <= 0		
		/ 

f(i) = 
		
		\ f(i - 1) + pData[i] i≠0并且f(i - 1) > 0

公式的意义：当以第i - 1 个数字结尾的子数组中所有数字的和小于0时，
如果把这个负数与第i个数累加，得到的结构比第i个数字本身还要小所以这种情况下以第i个数字结尾的子数组就是第i个数字本身(excel表 第三步)
如果以第i - 1个数字结尾的子数组中所有数字的和大于0，与第i个数字累加就得到以第i个数字结尾的子数组中所有数字的和

f(i) 对应的变量是nCurSum
max[f(i)] 就是nGreatestSum
