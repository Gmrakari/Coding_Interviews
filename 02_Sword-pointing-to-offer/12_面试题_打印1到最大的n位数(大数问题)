

/*
 * Date:2020-07-22 07：15
 * Author:Gmrakari
 * Project:面试题12_打印1到最大的n位数(大数问题)
 * 
 */

#题意
题目描述

给定一个数字N，打印从1到最大的N位数。

输入

每个输入文件仅包含一组测试样例。

对于每个测试案例，输入一个数字N(1<=N<=5)。 输出 对应每个测试案例，依次打印从1到最大的N位数。

样例输入

1

样例输出

1 2 3 4 5 6 7 8 9

void PrintToMaxOfNDigits_1(int n)
{
	int number = 1;
	int i = 0;
	while(i++ < n)
		number *= 10;

	for(i = 1;i < number;++i)
		printf("%d\t",i);
}

问题:当输入n很大的时候，我们求最大的n位数是不是用整型(int)或者长整型(long long)都会溢出

#再字符串上模拟数字加法的解法，绕过陷阱。


首先我们把字符串中的每一个数字都初始化为'0'，然后每一次为字符串表示的数字加1，再打印出来。

因此我们做两件事：
1、是在字符串表达的数字上模拟加法
2、是把字符串表达的数字打印出来

void Print1ToMaxOfDigits(int n)
{
	if(n <= 0)
		return ;

	char *number = new char[n + 1];
	memset(number,'0',n);
	number[n] = '\0';

	while(!Increment(number))
	{
		PrintNumber(number);
	}

	delete []number;
}

bool Increment(char* number)
{
	bool isOverflow = false;
	int nTakeOver = 0;
	int nLength = strlen(number);

	for(int i = nLength -1;i >= 0;i--)
	{
		int nSum = number[i] - '0' + nTakeOver;
		if(i == nLength - 1)
			nSum++;

		if(nSum >= 10)
		{
			if(i == 0)
				isOverflow = true;
			else
			{
				nSum -= 10;
				nTakeOver = 1;
				number[i] = '0' + nSum;
			}
		}
		else
		{
			number[i] = '0' + nSum;
			break;
		}
	}
	return isOverflow;
}


void PrintNumber(char* number)
{
	bool isBeginning0 = true;
	int nLength = strlen(number);

	for(int i = 0;i < nLength;++i)
	{
		if(isBeginning0 && number[i] != '0')
			isBeginning0 = false;

		if(!isBeginning0)
		{
			printf("%c\n",number[i]);
		}
	}
	printf("\t");
}



#把问题转换成数字排列的方法，使用递归。

void Print1ToMaxOfDigits_Recursive(int n)
{
	if(n <= 0)
		return ;

	char* number = new char[n + 1];
	number[n] = '\0';

	for(int i = 0;i < 10;++i)
	{
		number[0] = i + '0';
		Print1ToMaxOfDigitsRecursively(number,n,0);
	}
	delete[] number;
}

void Print1ToMaxOfDigitsRecursively(char* number,int length,int index)
{
	if(index == length -1)
	{
		PrintNumber(number);
		return;
	}

	for(int i = 0;i < 10;++i)
	{
		number[index + 1] = i + '0';
		Print1ToMaxOfDigitsRecursively(number,length,index + 1);
	}
}