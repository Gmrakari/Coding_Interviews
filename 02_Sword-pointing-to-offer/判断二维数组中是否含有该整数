
/*
Date:2020-07-01 11:00
 */

#题目描述
在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。

#输入描述
array： 待查找的二维数组 target：查找的数字

#输出描述
查找到返回true，查找不到返回false

思路:
首先选取数组中右上角得数字。如果该数字等于要查找的数字，查找过程结束；
如果该数字大于要查找的数字，剔除这个数字所在的列；
如果该数字小于要查找的数字，提出这个数字所在的行；

bool Find(int* matrix,int rows,int columns,int number)
{
	bool found = false;

	if(matrix != NULL && rows > 0 && columns > 0)
	{
		int row = 0;
		int column = columns - 1;

		while(row < rows && column >= 0)
		{
			if(matrix[row * columns + column] == number)
			{
				found = true;
				break;
			}
			else if(matrix[row * columns + column] > number)
				--column;
			else
				++row;
		}
	}

	return found;
}

/*
update:2020-07-02 07:18
 */

暴力解法

#include <iostream>
#include <vector>

using namespace std;

class Solution
{
public:
	bool Find(vector<vector<int>> array,int target){
		int row = 0;
		int column = 0;
		int t = 0;
		bool isFound = false;

		for(int i = 0;i < array.size();++i){
			for(int j = 0; j < array[i].size();++j){
				if(false == isFound && target == array[i][j]){
					isFound = true;
				}
			}
		}
		return isFound;
	}
	
};

int main()
{
	int a1[] = { 1, 2, 8, 9, };
    int a2[] = { 2, 4, 9, 12, };
    int a3[] = { 4, 7, 10, 13, };
    int a4[] = { 6, 8, 11, 15, };

    vector<vector<int>> array;

    array.push_back(vector<int>(a1, a1 + 4));
    array.push_back(vector<int>(a2, a2 + 4));
    array.push_back(vector<int>(a3, a3 + 4));
    array.push_back(vector<int>(a4, a4 + 4));

    Solution solu;
    cout<<solu.Find(array,7)<<endl;
    return 0;
}

