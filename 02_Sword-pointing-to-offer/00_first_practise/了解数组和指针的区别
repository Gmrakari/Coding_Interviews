
/*
date:2020-07-01 10:08
 */

/*

用数组来实现简单的哈希表：把数组的下标设为哈希表的键值（Key），而把数组中的每一个数字设为哈希表的值（Value），这样每一个下标及数组中该下标对应的数字就组成一个键值-值的配对。

哈希表能够在O(1)中实现查找

多种动态数组，比如C++中的STL中的vector，解决数组空间效率不高的问题

先为数组开辟较小的空间，然后往数组中添加数据。当数据的数组超过数组的容量时，我们再重新分配一块更大的空间（STL的vector每次扩充容量时，新的容量都是前一次的两倍），把之前的数据复制到新的数组中，再把之前的内存释放，减少内存的浪费。

使用动态数组时要尽量减少改变数组容量大小的次数，每次涉及大量的额外操作。

了解数组和指针的区别

*/
int GetSize(int data[]){
	return sizeof(data);
}

int _tmain(int argc,_TCHAR* argv[])
{
	int data1[] = {1,2,3,4,5};
	int size1 = sizeof(data1);

	int* data2 = data1;
	int size2 = sizeof(data2);

	int size3 = GetSize(data1);

	printf("%d,%d,%d",size1,size2,size3);//错误 5,4,5   搞错求大小的概念。
}

A:输出"20 4 4",
data1是一个数组，sizeof(data1)是求数组的大小。
数组包含5个整数，每一个整数占4个字节，因此总共是20字节。

data2声明为指针，尽管它指向了数组data1的第一个数字，但它的本质仍然是一个指针

32位系统上，对任意指针求sizeof，得到的结果都是4

在c/c++中，当数组作为函数的参数进行传递时，数组就自动退化为同类型的指针。
因此尽管函数GetSize的参数data被声明为数组，但它会退化为指针，size3仍然是4.


