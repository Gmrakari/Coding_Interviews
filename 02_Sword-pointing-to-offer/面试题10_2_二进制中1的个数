

/*
 * Date:2020-07-18 11：00
 * Author:Gmrakari
 * Project:面试题10_2_二进制中1的个数
 * 
 */

题目描述

输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。

样例输入

3 4 5 -1

样例输出

1 2 3 2

如何判断一个整数的最右边的二进制数是不是1

只要把整数和1做位运算看结果是不是0就知道。

如果一个整数与1做与运算的结果是1 表示该整数最右边一位是1，否则为0

int NumberOf1_one(int n)
{
	int count = 1;
	while(n)
	{
		if( n & 1)
		{
			count ++;

			n  = n >> 1;
		}
	} 
	return count;
}

实际编程中应尽可能地用位移运算代替除法(除法的效率比位移运算要低很多)

int NumberOf1_two(int n)
{
	int count = 0;
	unsigned int flag = 1;
	while(flag)
	{
		if( n & flag)
			count++;
		flag = flag << 1;
	}

	return count;
}

循环的次数等于整数二进制的位数，32位的整数需要循环32次

#惊喜的解法

把该二进制整数减去1，然后与原来的整数进行与运算。

比如

1100 减去 1 变成 1011

1011 与 1100 进行与运算  即是 1011 & 1100 = 1000 

int NumberOf1_three(int n)
{
	int count = 0;

	while(n)
	{
		++count;
		n = (n - 1) & n;
	}

	return count;
}
